// ================================================================================================
// CONTEXTO DE AUTENTICACI√ìN - VERSION REFACTORIZADA CON COMENTARIOS DETALLADOS
// ================================================================================================
// Este archivo maneja toda la l√≥gica de autenticaci√≥n, gesti√≥n de usuarios y operaciones seguras
// con RLS (Row Level Security) en Supabase. Es el coraz√≥n del sistema de autenticaci√≥n.
// ================================================================================================

import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import type { User } from '@supabase/supabase-js';
import { supabase } from '@/lib/supabase';
import type { Profile, Club } from '@/types/database';

// ================================================================================================
// DEFINICI√ìN DE TIPOS PARA EL CONTEXTO
// ================================================================================================

// Estado completo del usuario autenticado
interface AuthState {
  user: {
    user: User;           // Datos del usuario de Supabase auth
    profile: Profile;     // Perfil extendido desde tabla profiles
    clubs: Club[];        // Clubs a los que el usuario tiene acceso
  } | null;
}

// Tipo para el contexto de autenticaci√≥n que ser√° compartido por toda la app
interface AuthContextType {
  // Estados principales
  authState: AuthState;                           // Estado actual de autenticaci√≥n
  isLoading: boolean;                            // Indica si est√° cargando datos de auth
  
  // Funciones de autenticaci√≥n b√°sica
  login: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;
  logout: () => Promise<void>;
  refreshUser: () => Promise<void>;              // Refresca datos del usuario actual
  
  // Funciones de verificaci√≥n de roles y permisos
  isSuperAdmin: () => boolean;                   // Verifica si es super administrador
  hasClubRole: (clubId: string, role: string) => boolean; // Verifica rol en club espec√≠fico
  
  // Funci√≥n CR√çTICA para operaciones seguras con RLS
  secureQuery: <T = any>(
    table: string,                               // Tabla de la base de datos
    operation: 'select' | 'insert' | 'update' | 'delete', // Tipo de operaci√≥n
    data?: any,                                  // Datos para insert/update
    conditions?: any                             // Condiciones para update/delete/select
  ) => Promise<{ data: T[] | null; error: any }>;
}

// Props para el provider del contexto
interface AuthProviderProps {
  children: React.ReactNode;
}

// ================================================================================================
// CREACI√ìN DEL CONTEXTO Y HOOK PERSONALIZADO
// ================================================================================================

// Crear contexto con valor inicial undefined
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Hook personalizado para usar el contexto de autenticaci√≥n
// Este hook debe ser usado en todos los componentes que necesiten autenticaci√≥n
export function useAuth(): AuthContextType {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth debe ser usado dentro de un AuthProvider');
  }
  return context;
}

// ================================================================================================
// COMPONENTE PROVIDER DE AUTENTICACI√ìN
// ================================================================================================

export function AuthProvider({ children }: AuthProviderProps) {
  // ============================================================================================
  // ESTADOS DEL COMPONENTE
  // ============================================================================================
  
  // Estado principal de autenticaci√≥n - contiene toda la info del usuario
  const [authState, setAuthState] = useState<AuthState>({ user: null });
  
  // Estado de carga - true cuando est√° procesando operaciones de auth
  const [isLoading, setIsLoading] = useState(true);
  
  // Control de concurrencia para evitar m√∫ltiples queries simult√°neas del mismo tipo
  const [activeQueries, setActiveQueries] = useState<Set<string>>(new Set());

  // ============================================================================================
  // FUNCI√ìN PARA OBTENER PERFIL COMPLETO DEL USUARIO
  // ============================================================================================
  
  // Esta funci√≥n obtiene el perfil extendido y los clubs del usuario desde la base de datos
  const fetchUserProfile = useCallback(async (user: User) => {
    try {
      console.log('üîÑ Obteniendo perfil del usuario:', user.email);
      
      // 1. Obtener perfil extendido desde tabla profiles
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (profileError) {
        console.error('‚ùå Error obteniendo perfil:', profileError);
        throw profileError;
      }

      if (!profileData) {
        console.error('‚ùå No se encontr√≥ perfil para el usuario');
        throw new Error('Perfil no encontrado');
      }

      console.log('‚úÖ Perfil obtenido:', profileData);

      // 2. Obtener clubs del usuario desde user_clubs
      const { data: userClubsData, error: userClubsError } = await supabase
        .from('user_clubs')
        .select(`
          club_id,
          role,
          is_active,
          clubs (*)
        `)
        .eq('user_id', user.id)
        .eq('is_active', true);

      if (userClubsError) {
        console.error('‚ùå Error obteniendo clubs del usuario:', userClubsError);
        // No lanzar error, solo loggear (clubs pueden estar vac√≠os)
      }

      // 3. Extraer clubs de la relaci√≥n
      const clubs: Club[] = userClubsData?.map((uc: any) => uc.clubs).filter(Boolean) || [];
      console.log(`‚úÖ Clubs obtenidos: ${clubs.length} clubs`);

      // 4. Actualizar estado con datos completos
      setAuthState({
        user: {
          user,           // Usuario de Supabase auth
          profile: profileData, // Perfil extendido
          clubs           // Clubs asociados
        }
      });

      console.log('‚úÖ Estado de autenticaci√≥n actualizado');

    } catch (error) {
      console.error('üí• Error en fetchUserProfile:', error);
      // En caso de error, limpiar estado
      clearAuthState();
      throw error;
    }
  }, []);

  // ============================================================================================
  // FUNCI√ìN PARA LIMPIAR ESTADO DE AUTENTICACI√ìN
  // ============================================================================================
  
  // Limpia completamente el estado cuando el usuario no est√° autenticado
  const clearAuthState = useCallback(() => {
    console.log('üßπ Limpiando estado de autenticaci√≥n');
    setAuthState({ user: null });
    setActiveQueries(new Set()); // Limpiar queries activas
  }, []);

  // ============================================================================================
  // FUNCI√ìN DE LOGIN
  // ============================================================================================
  
  // Funci√≥n para autenticar usuario con email y contrase√±a
  const login = async (email: string, password: string) => {
    try {
      console.log('üîê Iniciando login para:', email);
      // SEGURIDAD: No loggear contrase√±as en producci√≥n
      console.log('üîí Autenticando usuario...');
      setIsLoading(true);

      // Intentar autenticaci√≥n con Supabase
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error('‚ùå Error en login:', error);
        return { success: false, error: error.message };
      }

      if (!data.user) {
        console.error('‚ùå No se recibi√≥ usuario en respuesta de login');
        return { success: false, error: 'Usuario no encontrado' };
      }

      console.log('‚úÖ Login exitoso:', data.user.email);
      
      // El evento de auth state change se encargar√° de actualizar el estado
      return { success: true };

    } catch (error) {
      console.error('üí• Error inesperado en login:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Error desconocido' 
      };
    } finally {
      setIsLoading(false);
    }
  };

  // ============================================================================================
  // FUNCI√ìN DE LOGOUT
  // ============================================================================================
  
  // Funci√≥n para cerrar sesi√≥n del usuario
  const logout = async () => {
    try {
      console.log('üîê Iniciando logout');
      setIsLoading(true);

      // Cerrar sesi√≥n en Supabase
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('‚ùå Error en logout:', error);
        throw error;
      }

      console.log('‚úÖ Logout exitoso');
      
      // Limpiar estado local
      clearAuthState();

    } catch (error) {
      console.error('üí• Error en logout:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // ============================================================================================
  // FUNCI√ìN PARA REFRESCAR DATOS DEL USUARIO
  // ============================================================================================
  
  // Refresca los datos del usuario actual desde la base de datos
  const refreshUser = async () => {
    if (!authState.user) {
      console.log('‚ö†Ô∏è No hay usuario para refrescar');
      return;
    }

    try {
      console.log('üîÑ Refrescando datos del usuario');
      await fetchUserProfile(authState.user.user);
    } catch (error) {
      console.error('üí• Error refrescando usuario:', error);
    }
  };

  // ============================================================================================
  // FUNCIONES DE VERIFICACI√ìN DE ROLES Y PERMISOS
  // ============================================================================================
  
  // Verifica si el usuario actual es super administrador
  const isSuperAdmin = (): boolean => {
    const result = authState.user?.profile?.is_super_admin === true;
    console.log(`üîç isSuperAdmin() retorna: ${result}`);
    return result;
  };

  // Verifica si el usuario tiene un rol espec√≠fico en un club determinado
  const hasClubRole = (clubId: string, _role: string): boolean => {
    if (!authState.user) return false;
    
    // Super admins tienen acceso a todo
    if (isSuperAdmin()) return true;
    
    // Verificar en clubs del usuario (esto requerir√≠a datos adicionales)
    // Por ahora, simplificamos la l√≥gica
    return authState.user.clubs.some(club => club.id === clubId);
  };

  // ============================================================================================
  // FUNCI√ìN CR√çTICA: SECURE QUERY CON RLS
  // ============================================================================================
  
  // Esta funci√≥n ejecuta queries de forma segura con Row Level Security (RLS)
  // Incluye control de concurrencia, timeouts y manejo robusto de errores
  const secureQuery = async <T = any>(
    table: string,                               // Tabla objetivo
    operation: 'select' | 'insert' | 'update' | 'delete', // Tipo de operaci√≥n
    data?: any,                                  // Datos para insert/update
    conditions?: any                             // Condiciones para update/delete/select
  ): Promise<{ data: T[] | null; error: any }> => {
    
    // Generar ID √∫nico para tracking de la query
    const queryId = `${operation}-${table}-${Date.now()}-${Math.random()}`;
    console.log(`üîí SecureQuery START [${queryId}]: ${operation} en ${table}`, { data, conditions });

    try {
      // 1. VERIFICAR AUTENTICACI√ìN
      if (!authState.user) {
        console.log(`‚ùå Usuario no autenticado [${queryId}]`);
        return { data: null, error: { message: 'Usuario no autenticado' } };
      }

      console.log(`‚úÖ Usuario autenticado confirmado: ${authState.user.user.email} [${queryId}]`);

      // 2. CONTROL DE CONCURRENCIA
      // Evitar demasiadas queries simult√°neas del mismo tipo
      const similarQueryKey = `${operation}-${table}`;
      if (activeQueries.size > 3) {
        console.log(`‚ö†Ô∏è Demasiadas queries activas (${activeQueries.size}), rechazando [${queryId}]`);
        return { data: null, error: { message: 'Demasiadas operaciones simult√°neas' } };
      }

      // Marcar query como activa
      setActiveQueries(prev => new Set([...prev, similarQueryKey]));
      console.log(`üìù Query marcada como activa [${queryId}]: ${similarQueryKey} (total: ${activeQueries.size + 1})`);

      // 3. CONFIGURAR TIMEOUT DE 10 SEGUNDOS
      let result: any;

      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => {
          reject(new Error(`Timeout: ${operation} en ${table} tard√≥ m√°s de 10 segundos`));
        }, 10000); // 10 segundos timeout
      });

      // 4. EJECUTAR OPERACI√ìN ESPEC√çFICA
      const operationPromise = (async () => {
        switch (operation) {
          case 'select':
            console.log('üì° Ejecutando SELECT...');
            // SELECT con o sin condiciones
            if (conditions) {
              console.log('üì° SELECT con condiciones:', conditions);
              let selectQuery = supabase.from(table).select('*');
              
              // Aplicar condiciones din√°micamente
              Object.entries(conditions).forEach(([key, value]) => {
                selectQuery = selectQuery.eq(key, value as any);
              });
              
              const selectResult = await selectQuery;
              console.log('üì° Resultado SELECT con condiciones:', selectResult);
              return selectResult;
            } else {
              const selectResult = await supabase.from(table).select('*');
              console.log('üì° Resultado SELECT sin condiciones:', selectResult);
              return selectResult;
            }

          case 'insert':
            console.log('üì° Ejecutando INSERT...');
            // INSERT siempre devuelve los datos insertados
            const insertResult = await supabase.from(table).insert(data).select();
            console.log('üì° Resultado INSERT:', insertResult);
            return insertResult;

          case 'update':
            console.log('üì° Ejecutando UPDATE...');
            console.log('üì° UPDATE data:', data);
            console.log('üì° UPDATE conditions:', conditions);
            
            try {
              let updateResult;
              if (conditions?.id) {
                console.log('üì° UPDATE con ID:', conditions.id);
                // UPDATE con ID espec√≠fico - usar casting para evitar errores de TypeScript
                updateResult = await (supabase as any)
                  .from(table)
                  .update(data)
                  .eq('id', conditions.id)
                  .select();
              } else {
                console.log('üì° UPDATE sin condiciones');
                updateResult = await (supabase as any)
                  .from(table)
                  .update(data)
                  .select();
              }
              console.log('üì° Resultado UPDATE:', updateResult);
              return updateResult;
            } catch (updateError) {
              console.error('üí• Error espec√≠fico en UPDATE:', updateError);
              throw updateError;
            }

          case 'delete':
            console.log('üì° Ejecutando DELETE...');
            // DELETE con o sin condiciones
            let deleteResult;
            if (conditions?.id) {
              deleteResult = await supabase.from(table).delete().eq('id', conditions.id).select();
            } else {
              deleteResult = await supabase.from(table).delete().select();
            }
            console.log('üì° Resultado DELETE:', deleteResult);
            return deleteResult;

          default:
            console.log('‚ùå Operaci√≥n no soportada:', operation);
            throw new Error(`Operaci√≥n ${operation} no soportada`);
        }
      })();

      // 5. EJECUTAR CON TIMEOUT
      console.log(`‚è∞ Iniciando Promise.race [${queryId}]...`);
      result = await Promise.race([operationPromise, timeoutPromise]);
      console.log(`‚è∞ Promise.race completado [${queryId}]`);

      // 6. VALIDAR RESULTADO
      console.log(`üì• SecureQuery RESULT [${queryId}]:`, result);
      console.log(`üì• Tipo de result [${queryId}]:`, typeof result);
      console.log(`üì• Es array result [${queryId}]:`, Array.isArray(result));
      console.log(`üì• Keys de result [${queryId}]:`, result ? Object.keys(result) : 'N/A');

      // Verificar que el resultado tiene la estructura esperada
      if (!result || typeof result !== 'object') {
        console.log(`‚ùå Resultado inv√°lido [${queryId}]:`, result);
        console.log(`‚ùå Verificaci√≥n: result=${result}, typeof=${typeof result}`);
        return { data: null, error: { message: 'Respuesta inv√°lida del servidor' } };
      }

      // 7. RETORNAR RESULTADO FORMATEADO
      return {
        data: result.data as T[] || null,
        error: result.error || null
      };

    } catch (error) {
      // 8. MANEJO DE ERRORES
      console.error(`üí• Error en secureQuery [${queryId}]:`, error);
      
      // Detectar timeouts espec√≠ficamente
      if (error instanceof Error && error.message.includes('Timeout')) {
        console.log(`‚è∞ Timeout detectado [${queryId}]`);
        return { data: null, error: { message: `Operaci√≥n cancelada por timeout: ${error.message}` } };
      }
      
      return { data: null, error: { message: error instanceof Error ? error.message : 'Error desconocido' } };
      
    } finally {
      // 9. LIMPIEZA - SIEMPRE SE EJECUTA
      const similarQueryKey = `${operation}-${table}`;
      setActiveQueries(prev => {
        const newSet = new Set(prev);
        newSet.delete(similarQueryKey);
        return newSet;
      });
      console.log(`üßπ Query limpiada [${queryId}]: ${similarQueryKey}`);
    }
  };

  // ============================================================================================
  // EFFECTS PARA MONITOREO DE SESI√ìN
  // ============================================================================================

  // Effect para configurar listener de cambios de autenticaci√≥n y verificaci√≥n inicial
  useEffect(() => {
    console.log('üöÄ Iniciando AuthProvider...');
    
    // Funci√≥n para verificar sesi√≥n inicial
    const checkInitialSession = async () => {
      try {
        console.log('üîç Verificando sesi√≥n inicial...');
        
        // Obtener sesi√≥n actual de Supabase
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('‚ùå Error obteniendo sesi√≥n inicial:', error);
          clearAuthState();
          return;
        }

        if (session?.user) {
          console.log('‚úÖ Sesi√≥n inicial encontrada:', session.user.email);
          await fetchUserProfile(session.user);
        } else {
          console.log('‚ÑπÔ∏è No hay sesi√≥n inicial');
          clearAuthState();
        }
      } catch (error) {
        console.error('üí• Error en verificaci√≥n inicial:', error);
        clearAuthState();
      } finally {
        setIsLoading(false);
      }
    };

    // Configurar listener de cambios de estado de autenticaci√≥n
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log(`üîÑ Auth state change: ${event} - User: ${session?.user?.email || 'N/A'}`);
        
        try {
          if (event === 'SIGNED_IN' && session?.user) {
            // Usuario se autentic√≥
            console.log('‚úÖ Usuario autenticado:', session.user.email);
            await fetchUserProfile(session.user);
          } else if (event === 'SIGNED_OUT') {
            // Usuario cerr√≥ sesi√≥n
            console.log('üö™ Usuario desautenticado');
            clearAuthState();
          } else if (event === 'TOKEN_REFRESHED' && session?.user) {
            // Token renovado
            console.log('üîÑ Token renovado para:', session.user.email);
            // No necesitamos recargar perfil, solo verificar que sigue v√°lido
          }
        } catch (error) {
          console.error('üí• Error manejando cambio de auth state:', error);
          clearAuthState();
        } finally {
          setIsLoading(false);
        }
      }
    );

    // Ejecutar verificaci√≥n inicial
    checkInitialSession();

    // Cleanup: desuscribir del listener
    return () => {
      console.log('üõë Desuscribiendo de auth state changes');
      subscription.unsubscribe();
    };
  }, [fetchUserProfile, clearAuthState]);

  // ============================================================================================
  // VALOR DEL CONTEXTO
  // ============================================================================================

  // Objeto que contiene todos los valores y funciones expuestos por el contexto
  const contextValue: AuthContextType = {
    // Estados
    authState,
    isLoading,
    
    // Funciones de autenticaci√≥n
    login,
    logout,
    refreshUser,
    
    // Funciones de verificaci√≥n
    isSuperAdmin,
    hasClubRole,
    
    // Funci√≥n cr√≠tica para operaciones seguras
    secureQuery,
  };

  // ============================================================================================
  // RENDERIZADO DEL PROVIDER
  // ============================================================================================

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

// ================================================================================================
// COMENTARIOS ADICIONALES Y NOTAS T√âCNICAS
// ================================================================================================

/*
NOTAS IMPORTANTES SOBRE EL FUNCIONAMIENTO:

1. SESI√ìN PERSISTENCE:
   - Supabase maneja autom√°ticamente la persistencia de sesiones
   - El cliente est√° configurado con persistSession: true en src/lib/supabase.ts
   - localStorage se usa para mantener sesiones entre recargas de p√°gina

2. ROW LEVEL SECURITY (RLS):
   - Las pol√≠ticas RLS est√°n configuradas en Supabase
   - secureQuery() funciona con estas pol√≠ticas autom√°ticamente
   - Super admins tienen acceso completo via is_super_admin() function

3. CONTROL DE CONCURRENCIA:
   - activeQueries previene m√∫ltiples queries simult√°neas del mismo tipo
   - Timeout de 10 segundos previene queries colgadas
   - Cada query tiene un ID √∫nico para tracking en logs

4. MANEJO DE ERRORES:
   - Todos los errores se loggean con detalles espec√≠ficos
   - Timeouts se detectan y manejan por separado
   - Estados se limpian autom√°ticamente en caso de error

5. RENDIMIENTO:
   - useCallback() optimiza funciones para evitar re-renders
   - fetchUserProfile() se ejecuta solo cuando es necesario
   - Estados se actualizan de forma at√≥mica

6. DEBUGGING:
   - Logs extensivos con emojis para f√°cil identificaci√≥n
   - Cada operaci√≥n tiene IDs √∫nicos para tracking
   - Estados intermedios se loggean para diagnostics
*/
