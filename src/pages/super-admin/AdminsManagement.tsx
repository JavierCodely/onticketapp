// ================================================================================================
// GESTI√ìN DE ADMINISTRADORES - P√ÅGINA PRINCIPAL REFACTORIZADA
// ================================================================================================
// Esta p√°gina act√∫a como orquestador principal para la gesti√≥n de administradores.
// Utiliza hooks especializados y componentes modulares para mantener el c√≥digo limpio
// y f√°cil de mantener. Cada responsabilidad est√° separada en su propio m√≥dulo.
// ================================================================================================

import React, { useState } from 'react';

// Hooks especializados para l√≥gica de negocio
import { useAdminsData } from '@/hooks/useAdminsData';           // Hook para datos y carga
import { useAdminsOperations } from '@/hooks/useAdminsOperations'; // Hook para operaciones CRUD

// Componentes especializados para UI
import AdminsHeader from '@/components/super-admin/AdminsHeader';   // Header con b√∫squeda
import AdminsTable from '@/components/super-admin/AdminsTable';     // Tabla de datos

// Componente refactorizado del formulario
import { AdminFormDialog } from '@/features/admin-management';

// Tipos TypeScript
import type { AdminWithClubs } from '@/features/admin-management';

// Componentes UI base de Shadcn
import {
  Card,
  CardContent,
} from '@/components/ui/card';

// ================================================================================================
// COMPONENTE PRINCIPAL
// ================================================================================================
const AdminsManagement: React.FC = () => {
  
  // ============================================================================================
  // HOOKS ESPECIALIZADOS PARA L√ìGICA DE NEGOCIO
  // ============================================================================================
  
  // Hook que maneja toda la l√≥gica de datos: carga, filtrado, b√∫squeda
  const {
    admins,           // Lista completa de administradores cargados
    filteredAdmins,   // Lista filtrada seg√∫n criterios de b√∫squeda
    clubs,           // Lista de clubs disponibles para asignaci√≥n
    loading,         // Estados de carga (admins, clubs, operations)
    filters,         // Estado actual de filtros (searchTerm, etc.)
    setSearchTerm,   // Funci√≥n para cambiar t√©rmino de b√∫squeda
    loadAdmins       // Funci√≥n para recargar administradores
  } = useAdminsData();
  
  // Hook que maneja todas las operaciones CRUD: eliminar, cambiar estado
  const {
    handleDeleteAdmin,      // Funci√≥n para eliminar administrador con confirmaci√≥n
    handleToggleAdminStatus, // Funci√≥n para activar/desactivar administrador
    ConfirmDialog          // Componente de di√°logo de confirmaci√≥n
  } = useAdminsOperations(loadAdmins); // Pasamos callback de recarga
  
  // ============================================================================================
  // ESTADOS LOCALES PARA CONTROL DE UI
  // ============================================================================================
  
  // Estado para controlar si el formulario de administrador est√° abierto
  const [adminDialogOpen, setAdminDialogOpen] = useState(false);
  
  // Estado para el administrador que se est√° editando (null = crear nuevo)
  const [editingAdmin, setEditingAdmin] = useState<AdminWithClubs | null>(null);
  
  // ============================================================================================
  // FUNCIONES DE MANEJO DE FORMULARIO
  // ============================================================================================
  
  // Funci√≥n para abrir el formulario en modo creaci√≥n de nuevo administrador
  const handleNewAdmin = () => {
    setEditingAdmin(null);      // No hay admin en edici√≥n (modo crear)
    setAdminDialogOpen(true);   // Abrir el di√°logo del formulario
  };
  
  // Funci√≥n para abrir el formulario en modo edici√≥n de administrador existente
  const handleEditAdmin = (admin: AdminWithClubs) => {
    try {
      console.log('üîß [AdminsManagement] handleEditAdmin iniciado', { admin });
      console.log('üîß [AdminsManagement] Datos del admin a editar:', {
        id: admin.id,
        email: admin.email,
        full_name: admin.full_name,
        status: admin.status,
        clubs: admin.clubs
      });
      
      setEditingAdmin(admin);     // Establecer admin a editar
      console.log('üîß [AdminsManagement] editingAdmin establecido');
      
      setAdminDialogOpen(true);   // Abrir el di√°logo del formulario
      console.log('üîß [AdminsManagement] Di√°logo abierto');
      
    } catch (error) {
      console.error('‚ùå [AdminsManagement] Error en handleEditAdmin:', error);
    }
  };
  
  // Funci√≥n para cerrar el formulario y limpiar estado
  const handleCloseAdminDialog = () => {
    setAdminDialogOpen(false);  // Cerrar el di√°logo
    setEditingAdmin(null);      // Limpiar admin en edici√≥n
  };
  
  // ============================================================================================
  // RENDERIZADO PRINCIPAL
  // ============================================================================================
  
  return (
    <div className="p-6 space-y-6">
      {/* ============================================================================ */}
      {/* CARD PRINCIPAL CON HEADER Y TABLA */}
      {/* ============================================================================ */}
      <Card>
        {/* Header con t√≠tulo, bot√≥n de crear y barra de b√∫squeda */}
        <AdminsHeader
          searchTerm={filters.searchTerm}           // T√©rmino de b√∫squeda actual
          onSearchChange={setSearchTerm}            // Funci√≥n para cambiar b√∫squeda
          onNewAdmin={handleNewAdmin}               // Funci√≥n para crear nuevo admin
          totalAdmins={admins.length}               // Total de admins cargados
          filteredCount={filteredAdmins.length}    // Cantidad despu√©s del filtro
        />
        
        {/* Contenido con tabla de administradores */}
        <CardContent>
          <AdminsTable
            admins={filteredAdmins}                 // Lista filtrada de administradores
            loading={loading.admins}                // Estado de carga de administradores
            onEdit={handleEditAdmin}                // Funci√≥n para editar admin
            onDelete={handleDeleteAdmin}            // Funci√≥n para eliminar admin
            onToggleStatus={handleToggleAdminStatus} // Funci√≥n para cambiar estado
          />
        </CardContent>
      </Card>

      {/* ============================================================================ */}
      {/* FORMULARIO MODAL PARA CREAR/EDITAR ADMINISTRADORES */}
      {/* ============================================================================ */}
      <AdminFormDialog
        open={adminDialogOpen}                      // Estado de apertura del di√°logo
        editingAdmin={editingAdmin}                 // Admin en edici√≥n (null = crear)
        clubs={clubs}                              // Lista de clubs disponibles
        onClose={handleCloseAdminDialog}           // Funci√≥n para cerrar formulario
        onSuccess={loadAdmins}                     // Funci√≥n para recargar datos despu√©s del √©xito
      />
      
      {/* ============================================================================ */}
      {/* DI√ÅLOGO DE CONFIRMACI√ìN PARA OPERACIONES */}
      {/* ============================================================================ */}
      <ConfirmDialog />  {/* Componente de confirmaci√≥n del hook useAdminsOperations */}
    </div>
  );
};

export default AdminsManagement;
